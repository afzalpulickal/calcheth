import { Component, ElementRef, ViewChild } from '@angular/core';
import readXlsxFile from 'read-excel-file'

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  title = 'SampleGSTPOC';
  file: File = null;
  GSTSiteInfo: Array<GSTFormat> = [];
  GSTSiteInfoBind: Array<GSTFormat> = [];
  GSTSiteInfoTotal: Array<GSTFormat> = [];
  GSTInfo: Array<GSTFormat> = [];
  GSTInfoCompared: Array<GSTFormat> = [];
  TextFileInfo: Array<GSTFormat> = [];
  isTotal: boolean = false;

  @ViewChild('myInputText')
  myInputText: ElementRef;

  @ViewChild('myInputSite')
  myInputSite: ElementRef;

  txtFileDetails = [
    {
      no: 1,
      name: "DATE",
      length: 11
    }, {
      no: 2,
      name: "INV.NO",
      length: 16
    }, {
      no: 3,
      name: "DESCRIPTION",
      length: 31     //29
    }, {
      no: 4,
      name: "GROSS",
      length: 11    //13
    }, {
      no: 5,
      name: "CGST",
      length: 11
    }, {
      no: 6,
      name: "SGST",
      length: 11
    }, {
      no: 7,
      name: "IGST",
      length: 11
    }, {
      no: 8,
      name: "TOTAL",
      length: 12
    }
  ]

  // txtFileConvert(files: FileList) {
  //   this.uploadDocument(files.item(0));
  // }

  // uploadDocument(file: File) {
  //   let csvContent = '';
  //   this.txtFileDetails.forEach(item => {
  //     csvContent += item.name + ',';
  //   });
  //   csvContent = csvContent.substring(0, csvContent.length - 1) + '\r\n';
  //   let fileReader = new FileReader();
  //   fileReader.onload = (e) => {
  //     let fullString: string = fileReader.result.toString();
  //     fullString = fullString.split(',').join(' ');
  //     let list: Array<string> = fullString.split('\r\n');
  //     list.splice(0, 6);   // Removing Header
  //     let stop = false;
  //     list.forEach(row => {
  //       if (!stop) {
  //         if (row.substring(0, 11) == '-----------') {
  //           stop = true;
  //         } else {
  //           let count = 0;
  //           this.txtFileDetails.forEach(item => {
  //             csvContent += row.substring(count, count + item.length).trim() + ',';
  //             count += item.length;
  //           });
  //           csvContent = csvContent.substring(0, csvContent.length - 1) + '\r\n';
  //         }
  //       }
  //     });


  //     const blob = new Blob([csvContent], { type: 'text/csv' });
  //     const fileName = 'Report.csv';
  //     const url = window.URL.createObjectURL(blob);
  //     const a: HTMLAnchorElement = document.createElement('a');
  //     a.href = url;
  //     a.download = fileName;
  //     document.body.appendChild(a);
  //     a.click();
  //     document.body.removeChild(a);
  //     URL.revokeObjectURL(url);
  //   }
  //   fileReader.readAsText(file);
  // }


  handleFileInput(files: FileList) {
    this.file = files.item(0);
    readXlsxFile(this.file).then((rows: Array<any>) => {
      this.GSTSiteInfo = [];
      this.GSTSiteInfoTotal = [];
      this.GSTSiteInfoBind = [];
      this.GSTSiteInfo = [];
      rows.forEach(row => {
        let date: Array<string> = row[4] ? row[4].split('-') : [];
        let data: GSTFormat = {
          GSTin: row[0], LegalName: row[1], InvoiceNumber: row[2], InvoiceType: row[3],
          InvoiceDate: date.length > 2 ? new Date(date[1] + '-' + date[0] + '-' + date[2]) : null,
          InvoiceValue: row[5], PlaceOfSupply: row[6],
          SupplyAttractCharge: row[7] == 'Y' ? true : false,
          RateOfTax: row[8],
          TaxableValue: row[9],
          IntegratedTax: row[10],
          CentralTax: row[11],
          StateTax: row[12],
          Cess: row[13],
          Status: row[14]
        };
        this.GSTSiteInfo.push(data);
        if (data.InvoiceNumber.includes('-Total') || data.RateOfTax.toString() === '-') {
          this.GSTSiteInfoTotal.push(data);
        }
      })
      if (this.isTotal) {
        this.GSTSiteInfoBind = this.GSTSiteInfoTotal;
      } else {
        this.GSTSiteInfoBind = this.GSTSiteInfo;
      }
    })
  }


  // handleOwnFileInput(files: FileList) {
  //   this.file = files.item(0);
  //   readXlsxFile(this.file).then((rows: Array<any>) => {
  //     this.GSTInfo = [];
  //     rows.forEach(row => {
  //       let invNo = row[2] !== null ? ((row[1] + '') + (row[2] + '')).replace(' ', '') : (row[1] + '').replace(' ', '');
  //       this.GSTInfo.push({
  //         InvoiceDate: new Date(row[0]), InvoiceNumber: invNo,
  //         LegalName: row[3], TaxableValue: row[5], CentralTax: row[6], StateTax: row[7], IntegratedTax: row[8], InvoiceValue: row[9]
  //       });
  //     });
  //   });
  // }


  handleTextFileInput(files: FileList) {
    this.parseTextFile(files.item(0));
  }


  clearAllUploads() {
    this.TextFileInfo = [];
    this.GSTInfo = [];
    this.GSTSiteInfo = [];
    this.GSTSiteInfoBind = [];
    this.GSTInfoCompared = [];
    this.myInputSite.nativeElement.value = '';
    this.myInputText.nativeElement.value = '';
  }


  parseTextFile(file: File) {
    // this.TextFileInfo = [];
    let fileReader = new FileReader();
    fileReader.onload = (e) => {
      let fullString: string = fileReader.result.toString();
      fullString = fullString.split(',').join(' ');
      let list: Array<string> = fullString.split('\r\n');
      list.splice(0, 6);   // Removing Header
      let stop = false;
      list.forEach(row => {
        let rowData: GSTFormat = {};
        if (!stop) {
          if (row.substring(0, 11) == '-----------') {
            stop = true;
          } else {
            let count = 0;
            this.txtFileDetails.forEach(item => {
              switch (item.name) {
                case 'DATE':
                  let DteStr = row.substring(count, count + item.length).trim();
                  let date: Array<string> = DteStr ? DteStr.split('-') : [];
                  rowData.InvoiceDate = new Date(date.length > 2 ? new Date(date[1] + '-' + date[0] + '-' + date[2]) : null);
                  break;
                case 'INV.NO':
                  rowData.InvoiceNumber = row.substring(count, count + item.length).trim().replace(' ', '');
                  break;
                case 'DESCRIPTION':
                  rowData.LegalName = row.substring(count, count + item.length).trim();
                  break;
                case 'GROSS':
                  rowData.TaxableValue = parseFloat(row.substring(count, count + item.length).trim());
                  break;
                case 'CGST':
                  rowData.CentralTax = parseFloat(row.substring(count, count + item.length).trim());
                  break;
                case 'SGST':
                  rowData.StateTax = parseFloat(row.substring(count, count + item.length).trim());
                  break;
                case 'IGST':
                  rowData.IntegratedTax = parseFloat(row.substring(count, count + item.length).trim());
                  break;
                case 'TOTAL':
                  rowData.InvoiceValue = parseFloat(row.substring(count, count + item.length).trim());
                  break;
                // case 'TIN.NO':
                //   rowData.GSTin = row.substring(count, count + item.length).trim();
                // break;

              }
              count += item.length;
            });
            this.TextFileInfo.push(rowData);
          }
        }
      });
      this.GSTInfo = this.TextFileInfo;
    };
    fileReader.readAsText(file);
  }

  totalCheckboxChanged() {
    this.isTotal = !this.isTotal;
    if (this.isTotal) {
      this.GSTSiteInfoBind = this.GSTSiteInfoTotal;
    } else {
      this.GSTSiteInfoBind = this.GSTSiteInfo;
    }
  }

  compare() {
    this.GSTInfoCompared = [];
    let tempInfo: Array<GSTFormat> = JSON.parse(JSON.stringify(this.GSTInfo));

    this.GSTSiteInfoTotal.forEach(data => {

      let idx = this.GSTInfo.findIndex(o => o.InvoiceNumber.trim() === data.InvoiceNumber.replace('-Total', '').trim());
      if (idx === -1) {
        data.CompareStatus = 'Invoice Not Found (' + data.InvoiceNumber.replace('-Total', '').trim() + ' )';
      } else {

        let idx1 = tempInfo.findIndex(o => o.InvoiceNumber.trim() === data.InvoiceNumber.replace('-Total', '').trim());
        if (idx1 !== -1) {
          tempInfo.splice(idx1, 1);
        }

        let dataEntered = this.GSTInfo[idx];
        if (data.InvoiceDate.getDate() === dataEntered.InvoiceDate.getDate() && data.InvoiceDate.getFullYear() === dataEntered.InvoiceDate.getFullYear() && data.InvoiceDate.getMonth() === dataEntered.InvoiceDate.getMonth()) {
          if ((data.InvoiceValue - dataEntered.InvoiceValue < 1) && (data.InvoiceValue - dataEntered.InvoiceValue > -1)) {
            // if (data.TaxableValue === dataEntered.TaxableValue) {
            if ((data.StateTax - dataEntered.StateTax < 1) && (data.StateTax - dataEntered.StateTax > -1)) {
              if ((data.CentralTax - dataEntered.CentralTax < 1) && (data.CentralTax - dataEntered.CentralTax > -1)) {
                if ((data.IntegratedTax - dataEntered.IntegratedTax < 1) && (data.IntegratedTax - dataEntered.IntegratedTax > -1)) {
                  data.CompareStatus = 'Matched';
                } else {
                  data.CompareStatus = 'IGST is not matching ( ' + data.IntegratedTax + ' / ' + dataEntered.IntegratedTax + ' )';
                }
              } else {
                data.CompareStatus = 'CGST is not matching ( ' + data.CentralTax + ' / ' + dataEntered.CentralTax + ' )';
              }
            } else {
              data.CompareStatus = 'SGST is not matching ( ' + data.StateTax + ' / ' + dataEntered.StateTax + ' )';
            }
            // } else {
            //   data.CompareStatus = 'Taxable Value (Gross) is not matching ( ' + data.TaxableValue + ' / ' + dataEntered.TaxableValue + ' )';
            // }
          } else {
            data.CompareStatus = 'Invoice Value is not matching ( ' + data.InvoiceValue + ' / ' + dataEntered.InvoiceValue + ' )';
          }
        } else {
          data.CompareStatus = 'Invoice Date is not matching ( ' + this.convertDate(data.InvoiceDate) + ' / ' + this.convertDate(dataEntered.InvoiceDate) + ' )';
        }
      }
      this.GSTInfoCompared.push(data);
    });

    tempInfo.forEach(item => {
      item.CompareStatus = 'Invoice Detail is Missing in site data ( ' + item.InvoiceNumber + ' )';
      this.GSTInfoCompared.push(item);
    });
  }



  DownloadcsvOfTextFile() {
    let csvContent = '';
    this.txtFileDetails.forEach(item => {
      csvContent += item.name + ',';
    });
    csvContent = csvContent.substring(0, csvContent.length - 1) + '\r\n';
    this.GSTInfo.forEach(item => {
      csvContent += this.convertDate(item.InvoiceDate) + ',' + item.InvoiceNumber + ',' + item.LegalName + ',' + item.TaxableValue
        + ',' + item.CentralTax + ',' + item.StateTax + ',' + item.IntegratedTax + ',' + item.InvoiceValue + '\r\n'
    })
    this.Download(csvContent, 'TextReport.csv');
  }

  DownloadReport() {
    let csvContent = 'Name,Tin No,Invoice Number,Invoice Date,Compare Status\r\n';
    this.GSTInfoCompared.forEach(item => {
      if (item.CompareStatus !== 'Matched') {
        csvContent += item.LegalName.split(',').join(' ') + ',' + (item.GSTin ? item.GSTin : '') + ',' + item.InvoiceNumber.replace('-Total', '').trim() + ',' + this.convertDate(item.InvoiceDate)
          + ',' + item.CompareStatus + '\r\n'
      }
    });
    this.Download(csvContent, 'Report.csv');
  }


  private Download(csvContent: string, fileName: string) {
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a: HTMLAnchorElement = document.createElement('a');
    a.href = url;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  private convertDate(dateString: any) {
    const date = new Date(dateString);
    const month_names = ['Jan', 'Feb', 'Mar',
      'Apr', 'May', 'Jun',
      'Jul', 'Aug', 'Sep',
      'Oct', 'Nov', 'Dec'];

    const day = date.getDate();
    const month_index = date.getMonth();
    const year = date.getFullYear();
    return '' + day + '-' + month_names[month_index] + '-' + year;
  }
}


export interface GSTFormat {
  GSTin?: string;
  LegalName?: string;
  InvoiceNumber?: string;
  InvoiceType?: string;
  InvoiceDate?: Date;
  InvoiceValue?: number;
  PlaceOfSupply?: string;
  SupplyAttractCharge?: boolean;
  RateOfTax?: number;
  TaxableValue?: number;
  IntegratedTax?: number;
  CentralTax?: number;
  StateTax?: number;
  Cess?: number;
  Status?: string;
  CompareStatus?: string;
}


#datatable {
    font-family: Arial, Helvetica, sans-serif;
    border-collapse: collapse;
    width: 100%;
  }
  
  #datatable td, #datatable th {
    border: 1px solid #ddd;
    padding: 8px;
  }
  
  #datatable tr:nth-child(even){background-color: #f2f2f2;}
  
  #datatable tr:hover {background-color: #ddd;}
  
  #datatable th {
    padding-top: 12px;
    padding-bottom: 12px;
    text-align: left;
    background-color: #4CAF50;
    color: white;
  }

  .button {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 6px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    transition-duration: 0.4s;
    cursor: pointer;
  }
  
  .button1 {
    background-color: white; 
    color: black; 
    border: 2px solid #4CAF50;
    cursor: not-allowed;
  }
  
  .active {
    background-color: #4CAF50;
    color: white;
    cursor: pointer;
  }

  .redClass{
    background-color: rgb(223, 200, 200);
  }



  .bgGreen{
      background-color: green;
  }


<div style="width: 100%;text-align: center;font-weight: bold;">
  <span>GST File Verification</span>
</div>

<!-- <div style="width:100%;float: left;height: 40px;">
  <span>Text file to CSV</span>
  <label for="txtfileinput" style="padding-right: 10px;">Choose txt file to convert</label>
  <input type="file" id="txtfileinput" (change)="txtFileConvert($event.target.files)">
</div> -->

<div style="float: left;height: 40px;">
  <label for="fileinput" style="padding-right: 10px;">Choose GST Site File (Without Header)</label>
  <input type="file" id="fileinput" #myInputSite (change)="handleFileInput($event.target.files)">
</div>
<div style="float: right;">
  <span>Show Total Only</span>
  <input type="checkbox" [checked]="isTotal" (change)="totalCheckboxChanged()" />
</div>
<div style="max-height: 500px;overflow: scroll;width: 100%;" *ngIf="GSTSiteInfoBind.length > 0">
  <table id="datatable">
    <tr>
      <th>Sl No</th>
      <!-- <th>Tin</th> -->
      <th>Name</th>
      <th>Invoice Number</th>
      <th>Invoice Date</th>
      <th>Invoice Value</th>
      <th>Taxable Value</th>
      <th>Central Tax</th>
      <th>State Tax</th>
      <th>Integrated Tax</th>
    </tr>
    <tr *ngFor="let detail of GSTSiteInfoBind;let i = index">
      <td>{{i+1}}</td>
      <!-- <td>{{detail.GSTin}}</td> -->
      <td>{{detail.LegalName}}</td>
      <td>{{detail.InvoiceNumber}}</td>
      <td>{{detail.InvoiceDate | date:'dd MMM yyyy'}}</td>
      <td>{{detail.InvoiceValue}}</td>
      <td>{{detail.TaxableValue}}</td>
      <td>{{detail.CentralTax}}</td>
      <td>{{detail.StateTax}}</td>
      <td>{{detail.IntegratedTax}}</td>
    </tr>
  </table>
</div>

<!-- <div style="float: left;height: 40px;width: 100%;padding-top: 30px;">
  <label for="fileinputOwn" style="padding-right: 10px;">Choose Purchase File (Without Header)</label>
  <input type="file" id="fileinputOwn" (change)="handleOwnFileInput($event.target.files)">
</div> -->

<div style="float: left;height: 40px;width: 100%;padding-top: 30px;">
  <label for="fileinputOwn" style="padding-right: 10px;">Choose Generated(Perfect) Text File</label>
  <input type="file" #myInputText id="fileinputOwn" (change)="handleTextFileInput($event.target.files)">
</div>


<div *ngIf="GSTInfo.length > 0">
  <div style="float: right">
    <button (click)="DownloadcsvOfTextFile()">Download CSV</button>
  </div>
  <div style="max-height: 500px;overflow: scroll;width: 100%;">
    <table id="datatable">
      <tr>
        <th>Sl No</th>
        <!-- <th>Tin</th> -->
        <th>Name</th>
        <th>Invoice Number</th>
        <th>Invoice Date</th>
        <th>Invoice Value</th>
        <th>Taxable Value</th>
        <th>Central Tax</th>
        <th>State Tax</th>
        <th>Integrated Tax</th>
      </tr>
      <tr *ngFor="let detail of GSTInfo;let i = index">
        <td>{{i+1}}</td>
        <!-- <td>{{detail.GSTin}}</td> -->
        <td>{{detail.LegalName}}</td>
        <td>{{detail.InvoiceNumber}}</td>
        <td>{{detail.InvoiceDate | date:'dd MMM yyyy'}}</td>
        <td>{{detail.InvoiceValue}}</td>
        <td>{{detail.TaxableValue}}</td>
        <td>{{detail.CentralTax}}</td>
        <td>{{detail.StateTax}}</td>
        <td>{{detail.IntegratedTax}}</td>
      </tr>
    </table>
  </div>
</div>
<div style="text-align: center;">
  <button class="button button1" [ngClass]="GSTInfo.length > 0 && GSTSiteInfoBind.length > 0 ? 'active' : ''"
    (click)="compare()">Compare</button>
  <button class="button button1 active" (click)="clearAllUploads()">Clear</button>
</div>

<div style="width: 100%;height: 50px;text-align: center;font-weight: bold;" *ngIf="GSTInfoCompared.length > 0">
  <span>GST File Comparison Result</span>
</div>


<div *ngIf="GSTInfoCompared.length > 0">
  <div style="float: left;">SiteReport/OwnReport</div>
  <div style="float: right">
    <button (click)="DownloadReport()">Download Report</button>
  </div>
  <div style="max-height: 500px;overflow: scroll;width: 100%;">
    <table id="datatable">
      <tr>
        <th>Sl No</th>
        <th>Name</th>
        <th>Tin No</th>
        <th>Invoice Number</th>
        <th>Invoice Date</th>
        <th>Compare Status</th>
      </tr>
      <tr *ngFor="let detail of GSTInfoCompared;let i = index">
        <td>{{i+1}}</td>
        <td>{{detail.LegalName}}</td>
        <td>{{detail.GSTin}}</td>
        <td>{{detail.InvoiceNumber}}</td>
        <td>{{detail.InvoiceDate | date:'dd MMM yyyy'}}</td>
        <td
          [ngClass]="detail.CompareStatus == 'Matched' ? 'bgGreen' : detail.CompareStatus == 'Not Found in Site Data' ? 'redClass' :''">
          {{detail.CompareStatus}}</td>
      </tr>
    </table>
  </div>
</div>
<router-outlet></router-outlet>
